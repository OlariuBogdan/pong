
#include <iostream>
#include <raylib.h>

using namespace std;

Color Green = Color{38, 185, 154, 255};
Color Dark_Green = Color{20, 160, 133, 255};
Color Light_Green = Color{129, 204, 184, 255};
Color Yellow = Color{243, 213, 91, 255};

Sound sound;
Sound sound2;

int player_score = 0;
int cpu_score = 0;
bool isPaused = false;
bool gameOver = false;
bool gameStarted = false;
const int max_score = 5;

class Ball
{
public:
    float x, y;
    float speed_x, speed_y;
    int radius;

    void Draw() { DrawCircle(x, y, radius, Yellow); }

    void Update()
    {
        x += speed_x;
        y += speed_y;

        if (y + radius >= GetScreenHeight() || y - radius <= 0)
        {
            speed_y *= -1;
            PlaySound(sound);
        }

        if (x + radius >= GetScreenWidth())
        {
            cpu_score++;
            PlaySound(sound2);
            ResetBall();
        }

        if (x - radius <= 0)
        {
            player_score++;
            PlaySound(sound2);
            ResetBall();
        }
    }

    void ResetBall()
    {
        x = GetScreenWidth() / 2;
        y = GetScreenHeight() / 2;
        int dir = (GetRandomValue(0, 1) == 0) ? -1 : 1;
        speed_x = 6 * dir;
        speed_y = 6 * ((GetRandomValue(0, 1) == 0) ? -1 : 1);
    }

    void IncreaseSpeed()
    {
        if (speed_x > 0) speed_x += 0.5f;
        else speed_x -= 0.5f;

        if (speed_y > 0) speed_y += 0.5f;
        else speed_y -= 0.5f;
    }
};

class Paddle
{
protected:
    void LimitMovement()
    {
        if (y < 0) y = 0;
        if (y + height > GetScreenHeight()) y = GetScreenHeight() - height;
    }

public:
    float x, y;
    float width, height;
    int speed;

    void Draw() { DrawRectangle(x, y, width, height, WHITE); }

    void Update()
    {
        if (IsKeyDown(KEY_UP)) y -= speed;
        if (IsKeyDown(KEY_DOWN)) y += speed;
        LimitMovement();
    }
};

class CpuPaddle : public Paddle
{
public:
    void Update(int ball_y)
    {
        if (y + height / 2 > ball_y) y -= speed;
        if (y + height / 2 < ball_y) y += speed;
        LimitMovement();
    }
};

Ball ball;
Paddle player;
CpuPaddle cpu;

void DrawCenterText(const char *text, int fontSize, Color color, int yOffset)
{
    int textWidth = MeasureText(text, fontSize);
    DrawText(text, GetScreenWidth() / 2 - textWidth / 2, GetScreenHeight() / 2 + yOffset, fontSize, color);
}

int main()
{
    const int screenWidth = 1280;
    const int screenHeight = 800;

    InitWindow(screenWidth, screenHeight, "Retro Pong!");
    InitAudioDevice();

    // Incarca sunete
    sound = LoadSound("resure/04.wav");
    sound2 = LoadSound("resure/02.wav");

    SetTargetFPS(60);

    // Init obiecte
    ball.radius = 20;
    ball.ResetBall();

    player.width = 25;
    player.height = 120;
    player.x = GetScreenWidth() - player.width - 10;
    player.y = GetScreenHeight() / 2 - player.height / 2;
    player.speed = 7;

    cpu.width = 25;
    cpu.height = 120;
    cpu.x = 10;
    cpu.y = GetScreenHeight() / 2 - cpu.height / 2;
    cpu.speed = 7;

    while (!WindowShouldClose())
    {
        // Toggle pauzÄƒ
        if (IsKeyPressed(KEY_P)) isPaused = !isPaused;
        if (IsKeyPressed(KEY_ENTER)) gameStarted = true;
        if (IsKeyPressed(KEY_R) && gameOver)
        {
            player_score = 0;
            cpu_score = 0;
            gameOver = false;
            ball.ResetBall();
        }

        BeginDrawing();
        ClearBackground(Dark_Green);

        // Fundal animat
        for (int i = 0; i < GetScreenHeight(); i += 40)
            DrawLine(GetScreenWidth() / 2, i, GetScreenWidth() / 2, i + 20, WHITE);

        if (!gameStarted)
        {
            DrawCenterText("RETRO PONG", 50, WHITE, -60);
            DrawCenterText("Press ENTER to Start", 30, WHITE, 10);
            DrawCenterText("Use UP/DOWN to move | P - Pause", 20, LIGHTGRAY, 50);
            EndDrawing();
            continue;
        }

        if (!gameOver && !isPaused)
        {
            ball.Update();
            player.Update();
            cpu.Update(ball.y);

            if (CheckCollisionCircleRec({ball.x, ball.y}, ball.radius, {player.x, player.y, player.width, player.height}))
            {
                ball.speed_x *= -1;
                ball.IncreaseSpeed();
                PlaySound(sound);
            }

            if (CheckCollisionCircleRec({ball.x, ball.y}, ball.radius, {cpu.x, cpu.y, cpu.width, cpu.height}))
            {
                ball.speed_x *= -1;
                PlaySound(sound);
            }
        }

        ball.Draw();
        player.Draw();
        cpu.Draw();

        // Scor
        DrawText(TextFormat("%i", cpu_score), GetScreenWidth() / 4, 20, 80, WHITE);
        DrawText(TextFormat("%i", player_score), GetScreenWidth() * 3 / 4, 20, 80, WHITE);

        if (isPaused)
            DrawCenterText("PAUSED", 40, YELLOW, 0);

        if (player_score >= max_score)
        {
            gameOver = true;
            DrawCenterText("PLAYER WINS!", 50, WHITE, -20);
            DrawCenterText("Press R to Restart", 30, LIGHTGRAY, 30);
        }
        else if (cpu_score >= max_score)
        {
            gameOver = true;
            DrawCenterText("CPU WINS!", 50, WHITE, -20);
            DrawCenterText("Press R to Restart", 30, LIGHTGRAY, 30);
        }

        EndDrawing();
    }

    UnloadSound(sound);
    UnloadSound(sound2);
    CloseAudioDevice();
    CloseWindow();

    return 0;
}
